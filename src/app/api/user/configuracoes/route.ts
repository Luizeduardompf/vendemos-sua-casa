import { NextRequest, NextResponse } from 'next/server';
import { createClient } from '@/lib/supabase';

export async function GET(request: NextRequest) {
  try {
    console.log('üîµ API Configura√ß√µes GET - Iniciando...');
    
    // Obter o token de autoriza√ß√£o do header
    const authHeader = request.headers.get('authorization');
    console.log('üîµ API Configura√ß√µes - Auth Header:', authHeader ? 'Presente' : 'Ausente');
    
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      console.log('üîµ API Configura√ß√µes - Token n√£o encontrado no header');
      return NextResponse.json(
        { error: 'Token de autoriza√ß√£o n√£o encontrado' },
        { status: 401 }
      );
    }
    
    const token = authHeader.split(' ')[1];
    console.log('üîµ API Configura√ß√µes - Token extra√≠do:', token ? 'Sim' : 'N√£o');
    
    const supabase = createClient();
    
    // Verificar se o utilizador est√° autenticado usando o token
    const { data: { user }, error: userError } = await supabase.auth.getUser(token);
    console.log('üîµ API Configura√ß√µes - User:', user ? 'Encontrado' : 'N√£o encontrado');
    console.log('üîµ API Configura√ß√µes - User Error:', userError);
    
    if (userError || !user) {
      return NextResponse.json(
        { error: 'Token inv√°lido ou expirado' },
        { status: 401 }
      );
    }
    
    // Buscar perfil do utilizador
    const { data: userProfile, error: profileError } = await supabase
      .from('users')
      .select('*')
      .eq('auth_user_id', user.id)
      .single();
    
    if (profileError) {
      console.error('Erro ao buscar perfil:', profileError);
      return NextResponse.json(
        { error: 'Erro ao buscar perfil do utilizador' },
        { status: 500 }
      );
    }
    
    if (!userProfile) {
      return NextResponse.json(
        { error: 'Perfil do utilizador n√£o encontrado' },
        { status: 404 }
      );
    }
    
    // Configura√ß√µes padr√£o
    const defaultConfig = {
      modo_escuro: false,
      notificacoes_email: true,
      notificacoes_push: true,
      notificacoes_sms: false,
      idioma: 'pt',
      fuso_horario: 'Europe/Lisbon',
      privacidade_perfil: 'publico',
      marketing_emails: false,
      tema_cor: 'azul',
      tamanho_fonte: 'medio',
      compacto: false,
      animacoes: true,
      som_notificacoes: true,
      vibracao: true
    };
    
    // Tentar buscar configura√ß√µes espec√≠ficas do utilizador
    let configuracoes = defaultConfig;
    
    try {
      const { data: userConfig, error: configError } = await supabase
        .from('user_configuracoes')
        .select('*')
        .eq('user_id', userProfile.id)
        .single();
      
      if (userConfig && !configError) {
        // Mesclar configura√ß√µes salvas com padr√µes
        configuracoes = {
          ...defaultConfig,
          ...userConfig.configuracoes
        };
      } else if (configError && configError.code === 'PGRST116') {
        // Tabela n√£o existe, retornar configura√ß√µes padr√£o
        console.log('üîµ API Configura√ß√µes - Tabela user_configuracoes n√£o existe, usando configura√ß√µes padr√£o');
      }
    } catch (tableError) {
      // Se houver erro ao acessar a tabela, usar configura√ß√µes padr√£o
      console.log('üîµ API Configura√ß√µes - Erro ao acessar tabela, usando configura√ß√µes padr√£o:', tableError);
    }
    
    console.log('üîµ API Configura√ß√µes - Configura√ß√µes carregadas:', configuracoes);
    
    return NextResponse.json({
      success: true,
      configuracoes
    });
    
  } catch (error) {
    console.error('Erro ao buscar configura√ß√µes:', error);
    return NextResponse.json(
      { error: 'Erro interno do servidor' },
      { status: 500 }
    );
  }
}

export async function PUT(request: NextRequest) {
  try {
    console.log('üîµ API Configura√ß√µes PUT - Iniciando...');
    
    // Obter o token de autoriza√ß√£o do header
    const authHeader = request.headers.get('authorization');
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      return NextResponse.json({ error: 'Token de autoriza√ß√£o n√£o encontrado' }, { status: 401 });
    }

    const token = authHeader.substring(7);
    const supabase = createClient();
    
    // Verificar o token com Supabase
    const { data: { user }, error: userError } = await supabase.auth.getUser(token);
    if (userError || !user) {
      return NextResponse.json({ error: 'Token inv√°lido' }, { status: 401 });
    }
    
    const body = await request.json();
    console.log('üîµ API Configura√ß√µes PUT - Body recebido:', body);
    
    // Buscar perfil do utilizador
    const { data: userProfile, error: profileError } = await supabase
      .from('users')
      .select('id')
      .eq('auth_user_id', user.id)
      .single();
    
    if (profileError || !userProfile) {
      return NextResponse.json({ error: 'Perfil do utilizador n√£o encontrado' }, { status: 404 });
    }
    
    // Validar configura√ß√µes recebidas
    const allowedConfigs = [
      'modo_escuro',
      'notificacoes_email',
      'notificacoes_push',
      'notificacoes_sms',
      'idioma',
      'fuso_horario',
      'privacidade_perfil',
      'marketing_emails',
      'tema_cor',
      'tamanho_fonte',
      'compacto',
      'animacoes',
      'som_notificacoes',
      'vibracao'
    ];
    
    const validConfigs = Object.keys(body)
      .filter(key => allowedConfigs.includes(key))
      .reduce((obj, key) => {
        obj[key] = body[key];
        return obj;
      }, {} as Record<string, unknown>);
    
    console.log('üîµ API Configura√ß√µes PUT - Configura√ß√µes v√°lidas:', validConfigs);
    
    // Tentar salvar no banco de dados
    try {
      // Verificar se j√° existem configura√ß√µes para este utilizador
      const { data: existingConfig, error: existingError } = await supabase
        .from('user_configuracoes')
        .select('*')
        .eq('user_id', userProfile.id)
        .single();
      
      if (existingConfig && !existingError) {
        // Atualizar configura√ß√µes existentes
        const updatedConfigs = {
          ...existingConfig.configuracoes,
          ...validConfigs
        };
        
        const { data: updatedConfig, error: updateError } = await supabase
          .from('user_configuracoes')
          .update({
            configuracoes: updatedConfigs,
            updated_at: new Date().toISOString()
          })
          .eq('user_id', userProfile.id)
          .select()
          .single();
        
        if (updateError) {
          console.error('Erro ao atualizar configura√ß√µes:', updateError);
          return NextResponse.json(
            { error: 'Erro ao atualizar configura√ß√µes' },
            { status: 500 }
          );
        }
        
        console.log('üîµ API Configura√ß√µes PUT - Configura√ß√µes atualizadas:', updatedConfig);
        
        return NextResponse.json({
          success: true,
          message: 'Configura√ß√µes atualizadas com sucesso',
          configuracoes: updatedConfigs
        });
        
      } else {
        // Criar novas configura√ß√µes
        const { data: newConfig, error: createError } = await supabase
          .from('user_configuracoes')
          .insert({
            user_id: userProfile.id,
            configuracoes: validConfigs,
            created_at: new Date().toISOString(),
            updated_at: new Date().toISOString()
          })
          .select()
          .single();
        
        if (createError) {
          console.error('üî¥ Erro ao criar configura√ß√µes:', createError);
          console.error('üî¥ C√≥digo do erro:', createError.code);
          console.error('üî¥ Mensagem do erro:', createError.message);
          console.error('üî¥ Detalhes do erro:', createError.details);
          console.error('üî¥ Hint do erro:', createError.hint);
          return NextResponse.json(
            { 
              error: 'Erro ao criar configura√ß√µes',
              details: createError.message,
              code: createError.code
            },
            { status: 500 }
          );
        }
        
        console.log('üîµ API Configura√ß√µes PUT - Configura√ß√µes criadas:', newConfig);
        
        return NextResponse.json({
          success: true,
          message: 'Configura√ß√µes criadas com sucesso',
          configuracoes: validConfigs
        });
      }
    } catch (tableError) {
      // Se a tabela n√£o existir, simular salvamento bem-sucedido
      console.log('üîµ API Configura√ß√µes PUT - Tabela n√£o existe, simulando salvamento:', tableError);
      
      return NextResponse.json({
        success: true,
        message: 'Configura√ß√µes salvas com sucesso (modo simulado)',
        configuracoes: validConfigs
      });
    }
    
  } catch (error) {
    console.error('Erro ao atualizar configura√ß√µes:', error);
    return NextResponse.json(
      { error: 'Erro interno do servidor' },
      { status: 500 }
    );
  }
}
