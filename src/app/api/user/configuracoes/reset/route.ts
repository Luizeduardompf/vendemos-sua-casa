import { NextRequest, NextResponse } from 'next/server';
import { createClient } from '@/lib/supabase';

export async function POST(request: NextRequest) {
  try {
    console.log('üîµ API Reset Configura√ß√µes - Iniciando...');
    
    // Obter o token de autoriza√ß√£o do header
    const authHeader = request.headers.get('authorization');
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      return NextResponse.json({ error: 'Token de autoriza√ß√£o n√£o encontrado' }, { status: 401 });
    }

    const token = authHeader.substring(7);
    const supabase = createClient();
    
    // Verificar o token com Supabase
    const { data: { user }, error: userError } = await supabase.auth.getUser(token);
    if (userError || !user) {
      return NextResponse.json({ error: 'Token inv√°lido' }, { status: 401 });
    }
    
    // Buscar perfil do utilizador
    const { data: userProfile, error: profileError } = await supabase
      .from('users')
      .select('id')
      .eq('auth_user_id', user.id)
      .single();
    
    if (profileError || !userProfile) {
      return NextResponse.json({ error: 'Perfil do utilizador n√£o encontrado' }, { status: 404 });
    }
    
    // Configura√ß√µes padr√£o
    const defaultConfig = {
      modo_escuro: false,
      notificacoes_email: true,
      notificacoes_push: true,
      notificacoes_sms: false,
      idioma: 'pt',
      fuso_horario: 'Europe/Lisbon',
      privacidade_perfil: 'publico',
      marketing_emails: false,
      tema_cor: 'azul',
      tamanho_fonte: 'medio',
      compacto: false,
      animacoes: true,
      som_notificacoes: true,
      vibracao: true
    };
    
    // Verificar se j√° existem configura√ß√µes para este utilizador
    const { data: existingConfig, error: existingError } = await supabase
      .from('user_configuracoes')
      .select('*')
      .eq('user_id', userProfile.id)
      .single();
    
    if (existingConfig && !existingError) {
      // Atualizar para configura√ß√µes padr√£o
      const { data: updatedConfig, error: updateError } = await supabase
        .from('user_configuracoes')
        .update({
          configuracoes: defaultConfig,
          updated_at: new Date().toISOString()
        })
        .eq('user_id', userProfile.id)
        .select()
        .single();
      
      if (updateError) {
        console.error('Erro ao resetar configura√ß√µes:', updateError);
        return NextResponse.json(
          { error: 'Erro ao resetar configura√ß√µes' },
          { status: 500 }
        );
      }
      
      console.log('üîµ API Reset Configura√ß√µes - Configura√ß√µes resetadas:', updatedConfig);
      
      return NextResponse.json({
        success: true,
        message: 'Configura√ß√µes resetadas para os valores padr√£o',
        configuracoes: defaultConfig
      });
      
    } else {
      // Criar configura√ß√µes padr√£o
      const { data: newConfig, error: createError } = await supabase
        .from('user_configuracoes')
        .insert({
          user_id: userProfile.id,
          configuracoes: defaultConfig,
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString()
        })
        .select()
        .single();
      
      if (createError) {
        console.error('Erro ao criar configura√ß√µes padr√£o:', createError);
        return NextResponse.json(
          { error: 'Erro ao criar configura√ß√µes padr√£o' },
          { status: 500 }
        );
      }
      
      console.log('üîµ API Reset Configura√ß√µes - Configura√ß√µes padr√£o criadas:', newConfig);
      
      return NextResponse.json({
        success: true,
        message: 'Configura√ß√µes padr√£o criadas com sucesso',
        configuracoes: defaultConfig
      });
    }
    
  } catch (error) {
    console.error('Erro ao resetar configura√ß√µes:', error);
    return NextResponse.json(
      { error: 'Erro interno do servidor' },
      { status: 500 }
    );
  }
}
