'use client';

// TEMPOR√ÅRIO: Formul√°rio preenchido com dados fict√≠cios para facilitar testes
// Remover dados fict√≠cios quando n√£o precisar mais

import { useState, useEffect, useRef } from 'react';

// Fun√ß√£o para gerar dados fict√≠cios aleat√≥rios
const generateFakeData = () => {
  const titulos = [
    'Apartamento T3 Moderno - Avenidas Novas',
    'Casa T4 com Jardim - Estrela',
    'Apartamento T2 Renovado - Chiado',
    'Moradia T5 de Luxo - Cascais',
    'Apartamento T1 Premium - Pr√≠ncipe Real',
    'Casa T3 com Piscina - Sintra',
    'Apartamento T4 com Varanda - Lapa',
    'Moradia T6 com Garagem - Oeiras'
  ];
  
  const localizacoes = [
    'Avenidas Novas, Lisboa',
    'Estrela, Lisboa',
    'Chiado, Lisboa',
    'Cascais',
    'Pr√≠ncipe Real, Lisboa',
    'Sintra',
    'Lapa, Lisboa',
    'Oeiras'
  ];
  
  const enderecos = [
    'Rua das Avenidas Novas, 123, 4¬∫ andar',
    'Rua da Estrela, 45, 2¬∫ andar',
    'Rua Garrett, 78, 1¬∫ andar',
    'Avenida Marginal, 234',
    'Rua do Pr√≠ncipe Real, 56, 3¬∫ andar',
    'Rua de Sintra, 89, 1¬∫ andar',
    'Rua da Lapa, 12, 5¬∫ andar',
    'Rua de Oeiras, 345, 2¬∫ andar'
  ];
  
  const randomIndex = Math.floor(Math.random() * titulos.length);
  
  return {
    titulo: titulos[randomIndex],
    descricao: 'Propriedade em excelente estado de conserva√ß√£o, com acabamentos de qualidade e localiza√ß√£o privilegiada. Ideal para quem procura conforto e praticidade.',
    preco: (250000 + Math.random() * 300000).toFixed(0),
    area: (80 + Math.random() * 100).toFixed(0),
    area_terreno: (100 + Math.random() * 200).toFixed(0),
    quartos: (2 + Math.floor(Math.random() * 3)).toString(),
    banheiros: (1 + Math.floor(Math.random() * 2)).toString(),
    localizacao: localizacoes[randomIndex],
    endereco: enderecos[randomIndex],
    codigo_postal: '1000-00' + Math.floor(Math.random() * 10),
    cidade: 'Lisboa',
    distrito: 'Lisboa',
    pais: 'Portugal',
    tipo_imovel: 'apartamento',
    estado: 'excelente',
    ano_construcao: (2010 + Math.floor(Math.random() * 14)).toString(),
    certificado_energetico: ['A', 'B', 'C'][Math.floor(Math.random() * 3)],
    orientacao: ['norte', 'sul', 'este', 'oeste'][Math.floor(Math.random() * 4)],
    garagem: Math.random() > 0.3,
    elevador: Math.random() > 0.4,
    varanda: Math.random() > 0.2,
    terraco: Math.random() > 0.7,
    jardim: Math.random() > 0.6,
    piscina: Math.random() > 0.8,
    ar_condicionado: Math.random() > 0.3,
    aquecimento: Math.random() > 0.2,
    lareira: Math.random() > 0.7,
    alarme: Math.random() > 0.4,
    portao_automatico: Math.random() > 0.5,
    internet: true,
    tv_cabo: Math.random() > 0.3,
    lugares_garagem: Math.random() > 0.5 ? '1' : '2',
    tipo_garagem: ['coberta', 'descoberta', 'box'][Math.floor(Math.random() * 3)],
    observacoes: 'Propriedade em excelente estado de conserva√ß√£o, com acabamentos de qualidade e localiza√ß√£o privilegiada.',
    disponibilidade: 'imediata',
    tipo_negocio: 'venda',
    comissao: (2.5 + Math.random() * 2).toFixed(1),
    contacto_visitas: '+351 912 345 678',
    palavras_chave: 'apartamento, lisboa, moderno, garagem, elevador, varanda',
    destaque: Math.random() > 0.5,
    urgente: Math.random() > 0.8
  };
};
import { useRouter } from 'next/navigation';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Switch } from '@/components/ui/switch';
import PageLayout, { Section, TwoColumnGrid } from '@/components/dashboard/page-layout';
import Message from '@/components/ui/message';
import { 
  Upload, 
  X, 
  Plus, 
  MapPin, 
  Home, 
  Car, 
  TreePine, 
  Wifi, 
  Shield,
  Camera,
  Trash2,
  Eye
} from 'lucide-react';

interface ImageFile {
  id: string;
  file: File;
  preview: string;
  isMain: boolean;
}

export default function CadastrarImovelPage() {
  const router = useRouter();
  const fileInputRef = useRef<HTMLInputElement>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [isSaving, setIsSaving] = useState(false);
  const [message, setMessage] = useState<{ type: 'success' | 'error'; text: string } | null>(null);
  const [errors, setErrors] = useState<Record<string, string>>({});
  const [images, setImages] = useState<ImageFile[]>([]);

  // Dados do formul√°rio (preenchido com dados fict√≠cios aleat√≥rios para teste)
  const [formData, setFormData] = useState(() => generateFakeData());

  useEffect(() => {
    setIsLoading(false);
  }, []);

  const handleInputChange = (name: string, value: string | boolean) => {
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
    
    // Limpar erro do campo quando o usu√°rio come√ßar a digitar
    if (errors[name]) {
      setErrors(prev => ({
        ...prev,
        [name]: ''
      }));
    }
  };

  const handleImageUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const files = event.target.files;
    if (!files) return;

    Array.from(files).forEach(file => {
      if (file.type.startsWith('image/')) {
        const id = Math.random().toString(36).substr(2, 9);
        const preview = URL.createObjectURL(file);
        
        const newImage: ImageFile = {
          id,
          file,
          preview,
          isMain: images.length === 0 // Primeira imagem √© principal por padr√£o
        };
        
        setImages(prev => [...prev, newImage]);
      }
    });
  };

  const removeImage = (id: string) => {
    setImages(prev => {
      const newImages = prev.filter(img => img.id !== id);
      // Se removemos a imagem principal, definir a primeira como principal
      if (newImages.length > 0 && !newImages.some(img => img.isMain)) {
        newImages[0].isMain = true;
      }
      return newImages;
    });
  };

  const setMainImage = (id: string) => {
    setImages(prev => prev.map(img => ({
      ...img,
      isMain: img.id === id
    })));
  };

  const validateForm = () => {
    const newErrors: Record<string, string> = {};

    // Valida√ß√µes obrigat√≥rias
    if (!formData.titulo.trim()) newErrors.titulo = 'T√≠tulo √© obrigat√≥rio';
    if (!formData.descricao.trim()) newErrors.descricao = 'Descri√ß√£o √© obrigat√≥ria';
    if (!formData.preco.trim()) newErrors.preco = 'Pre√ßo √© obrigat√≥rio';
    else if (isNaN(Number(formData.preco)) || Number(formData.preco) <= 0) newErrors.preco = 'Pre√ßo deve ser um n√∫mero v√°lido';
    
    if (!formData.area.trim()) newErrors.area = '√Årea √© obrigat√≥ria';
    else if (isNaN(Number(formData.area)) || Number(formData.area) <= 0) newErrors.area = '√Årea deve ser um n√∫mero v√°lido';
    
    if (!formData.quartos.trim()) newErrors.quartos = 'N√∫mero de quartos √© obrigat√≥rio';
    else if (isNaN(Number(formData.quartos)) || Number(formData.quartos) < 0) newErrors.quartos = 'N√∫mero de quartos deve ser um n√∫mero v√°lido';
    
    if (!formData.banheiros.trim()) newErrors.banheiros = 'N√∫mero de banheiros √© obrigat√≥rio';
    else if (isNaN(Number(formData.banheiros)) || Number(formData.banheiros) < 0) newErrors.banheiros = 'N√∫mero de banheiros deve ser um n√∫mero v√°lido';
    
    if (!formData.localizacao.trim()) newErrors.localizacao = 'Localiza√ß√£o √© obrigat√≥ria';
    if (!formData.endereco.trim()) newErrors.endereco = 'Endere√ßo √© obrigat√≥rio';
    if (!formData.cidade.trim()) newErrors.cidade = 'Cidade √© obrigat√≥ria';
    if (!formData.codigo_postal.trim()) newErrors.codigo_postal = 'C√≥digo postal √© obrigat√≥rio';

    // Valida√ß√£o de imagens (temporariamente desabilitada)
    // if (images.length === 0) newErrors.images = 'Pelo menos uma imagem √© obrigat√≥ria';

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    console.log('üîç Iniciando valida√ß√£o do formul√°rio...');
    console.log('üìã Dados atuais:', formData);
    console.log('üñºÔ∏è Imagens:', images);
    
    // Valida√ß√£o manual simples
    if (!formData.titulo.trim()) {
      setMessage({ type: 'error', text: 'T√≠tulo √© obrigat√≥rio' });
      return;
    }
    
    if (!formData.preco.trim()) {
      setMessage({ type: 'error', text: 'Pre√ßo √© obrigat√≥rio' });
      return;
    }
    
    if (!formData.area.trim()) {
      setMessage({ type: 'error', text: '√Årea √© obrigat√≥ria' });
      return;
    }
    
    if (!formData.endereco.trim()) {
      setMessage({ type: 'error', text: 'Endere√ßo √© obrigat√≥rio' });
      return;
    }
    
    if (!formData.cidade.trim()) {
      setMessage({ type: 'error', text: 'Cidade √© obrigat√≥ria' });
      return;
    }
    
    if (!formData.distrito.trim()) {
      setMessage({ type: 'error', text: 'Distrito √© obrigat√≥rio' });
      return;
    }
    
    console.log('‚úÖ Valida√ß√£o passou, iniciando envio...');
    setIsSaving(true);
    setMessage(null);

    try {
      console.log('üìù Enviando dados do im√≥vel:', formData);

      // Obter token de autentica√ß√£o
      const accessToken = localStorage.getItem('access_token');
      console.log('üîë Token encontrado:', accessToken ? accessToken.substring(0, 20) + '...' : 'NENHUM');
      
      if (!accessToken) {
        setMessage({ type: 'error', text: 'Token de autentica√ß√£o n√£o encontrado. Fa√ßa login novamente.' });
        return;
      }

      // Testar autentica√ß√£o primeiro
      console.log('üß™ Testando autentica√ß√£o...');
      const testResponse = await fetch('/api/debug/test-token-auth', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${accessToken}`,
        },
      });
      
      const testResult = await testResponse.json();
      console.log('üß™ Resultado do teste:', testResult);
      
      if (!testResponse.ok) {
        throw new Error(testResult.error || 'Erro no teste de autentica√ß√£o');
      }

      // Enviar dados para a API
      console.log('üìù Enviando dados para cadastro...');
      const response = await fetch('/api/imoveis/cadastrar', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${accessToken}`,
        },
        body: JSON.stringify(formData),
      });

      const result = await response.json();

      if (!response.ok) {
        throw new Error(result.error || 'Erro ao cadastrar im√≥vel');
      }

      console.log('‚úÖ Im√≥vel cadastrado:', result);
      
      setMessage({ 
        type: 'success', 
        text: 'Im√≥vel cadastrado com sucesso! Redirecionando...' 
      });
      
      // Redirecionar ap√≥s 2 segundos
      setTimeout(() => {
        router.push('/dashboard/proprietario/imoveis');
      }, 2000);
      
    } catch (error) {
      console.error('‚ùå Erro ao cadastrar im√≥vel:', error);
      setMessage({ 
        type: 'error', 
        text: error instanceof Error ? error.message : 'Erro ao cadastrar im√≥vel. Tente novamente.' 
      });
    } finally {
      setIsSaving(false);
    }
  };

  if (isLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4"></div>
          <p>A carregar...</p>
        </div>
      </div>
    );
  }

  return (
    <PageLayout
      title="Cadastrar Im√≥vel"
      description="Adicione um novo im√≥vel ao seu portf√≥lio com todas as informa√ß√µes necess√°rias"
      message={message ? (
        <Message
          type={message.type}
          text={message.text}
          onClose={() => setMessage(null)}
        />
      ) : undefined}
    >
      {/* Aviso tempor√°rio */}
      <div className="mb-6 p-4 bg-yellow-50 border border-yellow-200 rounded-lg">
        <div className="flex items-center">
          <div className="text-yellow-600 mr-3">‚ö†Ô∏è</div>
          <div>
            <p className="text-yellow-800 font-medium">Modo de Teste Ativo</p>
            <p className="text-yellow-700 text-sm">
              O formul√°rio est√° preenchido com dados fict√≠cios para facilitar os testes. 
              Use o bot√£o "üé≤ Gerar Dados Fict√≠cios" para gerar novos dados aleat√≥rios.
            </p>
          </div>
        </div>
      </div>
      <form onSubmit={handleSubmit} className="space-y-8">
        {/* Informa√ß√µes B√°sicas */}
        <Section title="Informa√ß√µes B√°sicas">
          <TwoColumnGrid
            left={
              <div className="space-y-4">
                <div>
                  <Label htmlFor="titulo" className="text-gray-700 dark:text-gray-300">
                    T√≠tulo do Im√≥vel *
                  </Label>
                  <Input
                    id="titulo"
                    value={formData.titulo}
                    onChange={(e) => handleInputChange('titulo', e.target.value)}
                    className={errors.titulo ? 'border-red-500' : ''}
                    placeholder="Ex: Apartamento T2 com varanda"
                  />
                  {errors.titulo && <p className="text-red-500 text-sm mt-1">{errors.titulo}</p>}
                </div>

                <div>
                  <Label htmlFor="preco" className="text-gray-700 dark:text-gray-300">
                    Pre√ßo (‚Ç¨) *
                  </Label>
                  <Input
                    id="preco"
                    type="number"
                    value={formData.preco}
                    onChange={(e) => handleInputChange('preco', e.target.value)}
                    className={errors.preco ? 'border-red-500' : ''}
                    placeholder="250000"
                  />
                  {errors.preco && <p className="text-red-500 text-sm mt-1">{errors.preco}</p>}
                </div>

                <div>
                  <Label htmlFor="area" className="text-gray-700 dark:text-gray-300">
                    √Årea √ötil (m¬≤) *
                  </Label>
                  <Input
                    id="area"
                    type="number"
                    value={formData.area}
                    onChange={(e) => handleInputChange('area', e.target.value)}
                    className={errors.area ? 'border-red-500' : ''}
                    placeholder="85"
                  />
                  {errors.area && <p className="text-red-500 text-sm mt-1">{errors.area}</p>}
                </div>

                <div>
                  <Label htmlFor="area_terreno" className="text-gray-700 dark:text-gray-300">
                    √Årea do Terreno (m¬≤)
                  </Label>
                  <Input
                    id="area_terreno"
                    type="number"
                    value={formData.area_terreno}
                    onChange={(e) => handleInputChange('area_terreno', e.target.value)}
                    placeholder="200"
                  />
                </div>

                <div>
                  <Label htmlFor="tipo_imovel" className="text-gray-700 dark:text-gray-300">
                    Tipo de Im√≥vel *
                  </Label>
                  <Select
                    value={formData.tipo_imovel}
                    onValueChange={(value) => handleInputChange('tipo_imovel', value)}
                  >
                    <SelectTrigger className={errors.tipo_imovel ? 'border-red-500' : ''}>
                      <SelectValue placeholder="Selecione o tipo" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="apartamento">Apartamento</SelectItem>
                      <SelectItem value="casa">Casa</SelectItem>
                      <SelectItem value="moradia">Moradia</SelectItem>
                      <SelectItem value="villa">Villa</SelectItem>
                      <SelectItem value="terreno">Terreno</SelectItem>
                      <SelectItem value="loja">Loja</SelectItem>
                      <SelectItem value="escritorio">Escrit√≥rio</SelectItem>
                      <SelectItem value="armazem">Armaz√©m</SelectItem>
                    </SelectContent>
                  </Select>
                  {errors.tipo_imovel && <p className="text-red-500 text-sm mt-1">{errors.tipo_imovel}</p>}
                </div>
              </div>
            }
            right={
              <div className="space-y-4">
                <div>
                  <Label htmlFor="quartos" className="text-gray-700 dark:text-gray-300">
                    Quartos *
                  </Label>
                  <Input
                    id="quartos"
                    type="number"
                    value={formData.quartos}
                    onChange={(e) => handleInputChange('quartos', e.target.value)}
                    className={errors.quartos ? 'border-red-500' : ''}
                    placeholder="2"
                  />
                  {errors.quartos && <p className="text-red-500 text-sm mt-1">{errors.quartos}</p>}
                </div>

                <div>
                  <Label htmlFor="banheiros" className="text-gray-700 dark:text-gray-300">
                    Banheiros *
                  </Label>
                  <Input
                    id="banheiros"
                    type="number"
                    value={formData.banheiros}
                    onChange={(e) => handleInputChange('banheiros', e.target.value)}
                    className={errors.banheiros ? 'border-red-500' : ''}
                    placeholder="1"
                  />
                  {errors.banheiros && <p className="text-red-500 text-sm mt-1">{errors.banheiros}</p>}
                </div>

                <div>
                  <Label htmlFor="estado" className="text-gray-700 dark:text-gray-300">
                    Estado do Im√≥vel *
                  </Label>
                  <Select
                    value={formData.estado}
                    onValueChange={(value) => handleInputChange('estado', value)}
                  >
                    <SelectTrigger className={errors.estado ? 'border-red-500' : ''}>
                      <SelectValue placeholder="Selecione o estado" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="excelente">Excelente</SelectItem>
                      <SelectItem value="bom">Bom</SelectItem>
                      <SelectItem value="regular">Regular</SelectItem>
                      <SelectItem value="precisa_renovacao">Precisa Renova√ß√£o</SelectItem>
                    </SelectContent>
                  </Select>
                  {errors.estado && <p className="text-red-500 text-sm mt-1">{errors.estado}</p>}
                </div>

                <div>
                  <Label htmlFor="ano_construcao" className="text-gray-700 dark:text-gray-300">
                    Ano de Constru√ß√£o
                  </Label>
                  <Input
                    id="ano_construcao"
                    type="number"
                    value={formData.ano_construcao}
                    onChange={(e) => handleInputChange('ano_construcao', e.target.value)}
                    placeholder="2020"
                    min="1800"
                    max={new Date().getFullYear()}
                  />
                </div>

                <div>
                  <Label htmlFor="certificado_energetico" className="text-gray-700 dark:text-gray-300">
                    Certificado Energ√©tico
                  </Label>
                  <Select
                    value={formData.certificado_energetico}
                    onValueChange={(value) => handleInputChange('certificado_energetico', value)}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Selecione a classifica√ß√£o" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="A+">A+</SelectItem>
                      <SelectItem value="A">A</SelectItem>
                      <SelectItem value="B">B</SelectItem>
                      <SelectItem value="C">C</SelectItem>
                      <SelectItem value="D">D</SelectItem>
                      <SelectItem value="E">E</SelectItem>
                      <SelectItem value="F">F</SelectItem>
                      <SelectItem value="G">G</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>
            }
          />
        </Section>

        {/* Localiza√ß√£o */}
        <Section title="Localiza√ß√£o">
          <TwoColumnGrid
            left={
              <div className="space-y-4">
                <div>
                  <Label htmlFor="endereco" className="text-gray-700 dark:text-gray-300">
                    Endere√ßo Completo *
                  </Label>
                  <Input
                    id="endereco"
                    value={formData.endereco}
                    onChange={(e) => handleInputChange('endereco', e.target.value)}
                    className={errors.endereco ? 'border-red-500' : ''}
                    placeholder="Rua das Flores, 123"
                  />
                  {errors.endereco && <p className="text-red-500 text-sm mt-1">{errors.endereco}</p>}
                </div>

                <div>
                  <Label htmlFor="codigo_postal" className="text-gray-700 dark:text-gray-300">
                    C√≥digo Postal *
                  </Label>
                  <Input
                    id="codigo_postal"
                    value={formData.codigo_postal}
                    onChange={(e) => handleInputChange('codigo_postal', e.target.value)}
                    className={errors.codigo_postal ? 'border-red-500' : ''}
                    placeholder="1000-001"
                  />
                  {errors.codigo_postal && <p className="text-red-500 text-sm mt-1">{errors.codigo_postal}</p>}
                </div>

                <div>
                  <Label htmlFor="cidade" className="text-gray-700 dark:text-gray-300">
                    Cidade *
                  </Label>
                  <Input
                    id="cidade"
                    value={formData.cidade}
                    onChange={(e) => handleInputChange('cidade', e.target.value)}
                    className={errors.cidade ? 'border-red-500' : ''}
                    placeholder="Lisboa"
                  />
                  {errors.cidade && <p className="text-red-500 text-sm mt-1">{errors.cidade}</p>}
                </div>
              </div>
            }
            right={
              <div className="space-y-4">
                <div>
                  <Label htmlFor="distrito" className="text-gray-700 dark:text-gray-300">
                    Distrito
                  </Label>
                  <Input
                    id="distrito"
                    value={formData.distrito}
                    onChange={(e) => handleInputChange('distrito', e.target.value)}
                    placeholder="Lisboa"
                  />
                </div>

                <div>
                  <Label htmlFor="pais" className="text-gray-700 dark:text-gray-300">
                    Pa√≠s
                  </Label>
                  <Input
                    id="pais"
                    value={formData.pais}
                    onChange={(e) => handleInputChange('pais', e.target.value)}
                    placeholder="Portugal"
                  />
                </div>

                <div>
                  <Label htmlFor="orientacao" className="text-gray-700 dark:text-gray-300">
                    Orienta√ß√£o Solar
                  </Label>
                  <Select
                    value={formData.orientacao}
                    onValueChange={(value) => handleInputChange('orientacao', value)}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Selecione a orienta√ß√£o" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="norte">Norte</SelectItem>
                      <SelectItem value="sul">Sul</SelectItem>
                      <SelectItem value="este">Este</SelectItem>
                      <SelectItem value="oeste">Oeste</SelectItem>
                      <SelectItem value="nordeste">Nordeste</SelectItem>
                      <SelectItem value="noroeste">Noroeste</SelectItem>
                      <SelectItem value="sudeste">Sudeste</SelectItem>
                      <SelectItem value="sudoeste">Sudoeste</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>
            }
          />
        </Section>

        {/* Caracter√≠sticas */}
        <Section title="Caracter√≠sticas e Comodidades">
          <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
            <div className="flex items-center space-x-2">
              <Switch
                id="garagem"
                checked={formData.garagem}
                onCheckedChange={(checked) => handleInputChange('garagem', checked)}
              />
              <Label htmlFor="garagem" className="flex items-center space-x-1">
                <Car className="h-4 w-4" />
                <span>Garagem</span>
              </Label>
            </div>

            <div className="flex items-center space-x-2">
              <Switch
                id="elevador"
                checked={formData.elevador}
                onCheckedChange={(checked) => handleInputChange('elevador', checked)}
              />
              <Label htmlFor="elevador" className="flex items-center space-x-1">
                <Home className="h-4 w-4" />
                <span>Elevador</span>
              </Label>
            </div>

            <div className="flex items-center space-x-2">
              <Switch
                id="varanda"
                checked={formData.varanda}
                onCheckedChange={(checked) => handleInputChange('varanda', checked)}
              />
              <Label htmlFor="varanda" className="flex items-center space-x-1">
                <Home className="h-4 w-4" />
                <span>Varanda</span>
              </Label>
            </div>

            <div className="flex items-center space-x-2">
              <Switch
                id="terraco"
                checked={formData.terraco}
                onCheckedChange={(checked) => handleInputChange('terraco', checked)}
              />
              <Label htmlFor="terraco" className="flex items-center space-x-1">
                <Home className="h-4 w-4" />
                <span>Terra√ßo</span>
              </Label>
            </div>

            <div className="flex items-center space-x-2">
              <Switch
                id="jardim"
                checked={formData.jardim}
                onCheckedChange={(checked) => handleInputChange('jardim', checked)}
              />
              <Label htmlFor="jardim" className="flex items-center space-x-1">
                <TreePine className="h-4 w-4" />
                <span>Jardim</span>
              </Label>
            </div>

            <div className="flex items-center space-x-2">
              <Switch
                id="piscina"
                checked={formData.piscina}
                onCheckedChange={(checked) => handleInputChange('piscina', checked)}
              />
              <Label htmlFor="piscina" className="flex items-center space-x-1">
                <Home className="h-4 w-4" />
                <span>Piscina</span>
              </Label>
            </div>

            <div className="flex items-center space-x-2">
              <Switch
                id="ar_condicionado"
                checked={formData.ar_condicionado}
                onCheckedChange={(checked) => handleInputChange('ar_condicionado', checked)}
              />
              <Label htmlFor="ar_condicionado" className="flex items-center space-x-1">
                <Home className="h-4 w-4" />
                <span>Ar Condicionado</span>
              </Label>
            </div>

            <div className="flex items-center space-x-2">
              <Switch
                id="aquecimento"
                checked={formData.aquecimento}
                onCheckedChange={(checked) => handleInputChange('aquecimento', checked)}
              />
              <Label htmlFor="aquecimento" className="flex items-center space-x-1">
                <Home className="h-4 w-4" />
                <span>Aquecimento</span>
              </Label>
            </div>

            <div className="flex items-center space-x-2">
              <Switch
                id="lareira"
                checked={formData.lareira}
                onCheckedChange={(checked) => handleInputChange('lareira', checked)}
              />
              <Label htmlFor="lareira" className="flex items-center space-x-1">
                <Home className="h-4 w-4" />
                <span>Lareira</span>
              </Label>
            </div>

            <div className="flex items-center space-x-2">
              <Switch
                id="alarme"
                checked={formData.alarme}
                onCheckedChange={(checked) => handleInputChange('alarme', checked)}
              />
              <Label htmlFor="alarme" className="flex items-center space-x-1">
                <Shield className="h-4 w-4" />
                <span>Alarme</span>
              </Label>
            </div>

            <div className="flex items-center space-x-2">
              <Switch
                id="portao_automatico"
                checked={formData.portao_automatico}
                onCheckedChange={(checked) => handleInputChange('portao_automatico', checked)}
              />
              <Label htmlFor="portao_automatico" className="flex items-center space-x-1">
                <Home className="h-4 w-4" />
                <span>Port√£o Autom√°tico</span>
              </Label>
            </div>

            <div className="flex items-center space-x-2">
              <Switch
                id="internet"
                checked={formData.internet}
                onCheckedChange={(checked) => handleInputChange('internet', checked)}
              />
              <Label htmlFor="internet" className="flex items-center space-x-1">
                <Wifi className="h-4 w-4" />
                <span>Internet</span>
              </Label>
            </div>
          </div>

          {formData.garagem && (
            <div className="mt-6 grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <Label htmlFor="lugares_garagem" className="text-gray-700 dark:text-gray-300">
                  Lugares de Garagem
                </Label>
                <Input
                  id="lugares_garagem"
                  type="number"
                  value={formData.lugares_garagem}
                  onChange={(e) => handleInputChange('lugares_garagem', e.target.value)}
                  placeholder="1"
                />
              </div>
              <div>
                <Label htmlFor="tipo_garagem" className="text-gray-700 dark:text-gray-300">
                  Tipo de Garagem
                </Label>
                <Select
                  value={formData.tipo_garagem}
                  onValueChange={(value) => handleInputChange('tipo_garagem', value)}
                >
                  <SelectTrigger>
                    <SelectValue placeholder="Selecione o tipo" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="coberta">Coberta</SelectItem>
                    <SelectItem value="descoberta">Descoberta</SelectItem>
                    <SelectItem value="box">Box</SelectItem>
                    <SelectItem value="garagem_privada">Garagem Privada</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>
          )}
        </Section>

        {/* Imagens */}
        <Section title="Imagens do Im√≥vel">
          <div className="space-y-4">
            <div>
              <Label className="text-gray-700 dark:text-gray-300">
                Upload de Imagens *
              </Label>
              <div className="mt-2">
                <input
                  ref={fileInputRef}
                  type="file"
                  multiple
                  accept="image/*"
                  onChange={handleImageUpload}
                  className="hidden"
                />
                <Button
                  type="button"
                  variant="outline"
                  onClick={() => fileInputRef.current?.click()}
                  className="w-full"
                >
                  <Upload className="h-4 w-4 mr-2" />
                  Selecionar Imagens
                </Button>
              </div>
              {errors.images && <p className="text-red-500 text-sm mt-1">{errors.images}</p>}
            </div>

            {images.length > 0 && (
              <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
                {images.map((image) => (
                  <div key={image.id} className="relative group">
                    <div className="aspect-square rounded-lg overflow-hidden border-2 border-gray-200 dark:border-gray-700">
                      <img
                        src={image.preview}
                        alt="Preview"
                        className="w-full h-full object-cover"
                      />
                    </div>
                    
                    {/* Overlay com a√ß√µes */}
                    <div className="absolute inset-0 bg-black bg-opacity-50 opacity-0 group-hover:opacity-100 transition-opacity rounded-lg flex items-center justify-center space-x-2">
                      <Button
                        type="button"
                        size="sm"
                        variant="secondary"
                        onClick={() => setMainImage(image.id)}
                        className={image.isMain ? 'bg-primary text-white' : ''}
                      >
                        <Camera className="h-4 w-4" />
                      </Button>
                      <Button
                        type="button"
                        size="sm"
                        variant="secondary"
                        onClick={() => removeImage(image.id)}
                        className="text-red-600 hover:text-red-700"
                      >
                        <Trash2 className="h-4 w-4" />
                      </Button>
                    </div>

                    {/* Badge de imagem principal */}
                    {image.isMain && (
                      <div className="absolute top-2 left-2 bg-primary text-white text-xs px-2 py-1 rounded">
                        Principal
                      </div>
                    )}
                  </div>
                ))}
              </div>
            )}
          </div>
        </Section>

        {/* Descri√ß√£o */}
        <Section title="Descri√ß√£o e Detalhes">
          <div className="space-y-4">
            <div>
              <Label htmlFor="descricao" className="text-gray-700 dark:text-gray-300">
                Descri√ß√£o Detalhada *
              </Label>
              <textarea
                id="descricao"
                value={formData.descricao}
                onChange={(e) => handleInputChange('descricao', e.target.value)}
                className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors duration-300 ${
                  errors.descricao ? 'border-red-500' : 'border-gray-300 dark:border-gray-600'
                } bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100`}
                rows={6}
                placeholder="Descreva o im√≥vel em detalhes, incluindo caracter√≠sticas especiais, localiza√ß√£o, comodidades, etc..."
              />
              {errors.descricao && <p className="text-red-500 text-sm mt-1">{errors.descricao}</p>}
            </div>

            <div>
              <Label htmlFor="observacoes" className="text-gray-700 dark:text-gray-300">
                Observa√ß√µes Adicionais
              </Label>
              <textarea
                id="observacoes"
                value={formData.observacoes}
                onChange={(e) => handleInputChange('observacoes', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors duration-300 bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100"
                rows={3}
                placeholder="Informa√ß√µes adicionais sobre o im√≥vel..."
              />
            </div>
          </div>
        </Section>

        {/* Informa√ß√µes Comerciais */}
        <Section title="Informa√ß√µes Comerciais">
          <TwoColumnGrid
            left={
              <div className="space-y-4">
                <div>
                  <Label htmlFor="tipo_negocio" className="text-gray-700 dark:text-gray-300">
                    Tipo de Neg√≥cio
                  </Label>
                  <Select
                    value={formData.tipo_negocio}
                    onValueChange={(value) => handleInputChange('tipo_negocio', value)}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Selecione o tipo" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="venda">Venda</SelectItem>
                      <SelectItem value="arrendamento">Arrendamento</SelectItem>
                      <SelectItem value="venda_arrendamento">Venda e Arrendamento</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                <div>
                  <Label htmlFor="disponibilidade" className="text-gray-700 dark:text-gray-300">
                    Disponibilidade
                  </Label>
                  <Select
                    value={formData.disponibilidade}
                    onValueChange={(value) => handleInputChange('disponibilidade', value)}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Selecione a disponibilidade" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="imediata">Imediata</SelectItem>
                      <SelectItem value="30_dias">30 dias</SelectItem>
                      <SelectItem value="60_dias">60 dias</SelectItem>
                      <SelectItem value="90_dias">90 dias</SelectItem>
                      <SelectItem value="negociavel">Negoci√°vel</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                <div>
                  <Label htmlFor="comissao" className="text-gray-700 dark:text-gray-300">
                    Comiss√£o (%)
                  </Label>
                  <Input
                    id="comissao"
                    type="number"
                    value={formData.comissao}
                    onChange={(e) => handleInputChange('comissao', e.target.value)}
                    placeholder="3"
                    min="0"
                    max="10"
                    step="0.1"
                  />
                </div>
              </div>
            }
            right={
              <div className="space-y-4">
                <div>
                  <Label htmlFor="contacto_visitas" className="text-gray-700 dark:text-gray-300">
                    Contacto para Visitas
                  </Label>
                  <Input
                    id="contacto_visitas"
                    value={formData.contacto_visitas}
                    onChange={(e) => handleInputChange('contacto_visitas', e.target.value)}
                    placeholder="+351 123 456 789"
                  />
                </div>

                <div>
                  <Label htmlFor="palavras_chave" className="text-gray-700 dark:text-gray-300">
                    Palavras-chave (SEO)
                  </Label>
                  <Input
                    id="palavras_chave"
                    value={formData.palavras_chave}
                    onChange={(e) => handleInputChange('palavras_chave', e.target.value)}
                    placeholder="apartamento, lisboa, centro, moderno"
                  />
                </div>

                <div className="space-y-3">
                  <div className="flex items-center space-x-2">
                    <Switch
                      id="destaque"
                      checked={formData.destaque}
                      onCheckedChange={(checked) => handleInputChange('destaque', checked)}
                    />
                    <Label htmlFor="destaque">Destacar este im√≥vel</Label>
                  </div>

                  <div className="flex items-center space-x-2">
                    <Switch
                      id="urgente"
                      checked={formData.urgente}
                      onCheckedChange={(checked) => handleInputChange('urgente', checked)}
                    />
                    <Label htmlFor="urgente">Venda urgente</Label>
                  </div>
                </div>
              </div>
            }
          />
        </Section>

        {/* Bot√µes de A√ß√£o */}
        <div className="flex space-x-4 pt-6 border-t border-gray-200 dark:border-gray-700">
          <Button
            type="button"
            variant="outline"
            onClick={() => setFormData(generateFakeData())}
            className="bg-yellow-100 hover:bg-yellow-200 text-yellow-800 border-yellow-300"
          >
            üé≤ Gerar Dados Fict√≠cios
          </Button>
          <Button
            type="submit"
            disabled={isSaving}
            className="flex-1 bg-primary hover:bg-primary/90"
          >
            {isSaving ? 'A guardar...' : 'Cadastrar Im√≥vel'}
          </Button>
          <Button
            type="button"
            variant="outline"
            onClick={() => router.back()}
            className="flex-1"
          >
            Cancelar
          </Button>
        </div>
      </form>
    </PageLayout>
  );
}